# Note that we compute all 1x1 kernel convolutions as GeMM

# enc_level0_resnet_block0__CONV3_0: 3x3 convolution with 320 input channels and 320 output channels
- id: 0 # padding=1 around all four sides, with a kernel of 3x3 this means (IY, IX) = (OY, OX)
  name: enc_level0_resnet_block0__CONV3_0
  operator_type: Conv
  equation: O[k][oy][ox]+=W[k][c][fy][fx]*I[c][iy][ix] # (IY, IX) = (64, 64)
  dimension_relations: [ix=1*ox+1*fx, iy=1*oy+1*fy] # STRIDE 1
  loop_dims: [K, C, OY, OX, FY, FX]
  loop_sizes: [320, 320, 64, 64, 3, 3] # (OY, OX) = (64, 64)
  operand_precision:
    W: 4
    I: 8 # assume INT8 quantized
    O: 12 
    O_final: 8 
  operand_source:
    I: 0
    W: 0

# level0_Downsample__CONV3_0: 3x3 convolution with 320 input channels and 320 output channels
- id: 1 # padding=1 around all four sides.
  name: level0_Downsample__CONV3_0
  operator_type: Conv
  equation: O[k][oy][ox]+=W[k][c][fy][fx]*I[c][iy][ix] # (IY, IX) = (64, 64)
  dimension_relations: [ix=2*ox+1*fx, iy=2*oy+1*fy] # STRIDE 2
  loop_dims: [K, C, OY, OX, FY, FX]
  loop_sizes: [320, 320, 32, 32, 3, 3] # (OY, OX) = (32, 32) halve of the input dimensions!
  operand_precision:
    W: 4
    I: 8
    O: 12 
    O_final: 8 
  operand_source:
    I: 1
    W: 1

# enc_level2_resnet_block1__CONV3_0: 3x3 convolution with 1280 input channels and 1280 output channels
- id: 2 # padding=1 around all four sides. 
  name: enc_level2_resnet_block1__CONV3_0
  operator_type: Conv
  equation: O[k][oy][ox]+=W[k][c][fy][fx]*I[c][iy][ix] # (IY, IX) = (16, 16)
  dimension_relations: [ix=1*ox+1*fx, iy=1*oy+1*fy] # STRIDE 1
  loop_dims: [K, C, OY, OX, FY, FX]
  loop_sizes: [1280, 1280, 16, 16, 3, 3] # (OY, OX) = (16, 16)
  operand_precision:
    W: 4
    I: 8
    O: 12 
    O_final: 8 
  operand_source:
    I: 2
    W: 2

# mid_resnet_block0__CONV3_0: 3x3 convolution with 1280 input channels and 1280 output channels
- id: 3 # padding=1 around all four sides.
  name: mid_resnet_block0__CONV3_0
  operator_type: Conv
  equation: O[k][oy][ox]+=W[k][c][fy][fx]*I[c][iy][ix]
  dimension_relations: [ix=1*ox+1*fx, iy=1*oy+1*fy] # STRIDE 1
  loop_dims: [K, C, OY, OX, FY, FX]
  loop_sizes: [1280, 1280, 8, 8, 3, 3] # (OY, OX) = (8, 8) same as input dimensions
  operand_precision:
    W: 4
    I: 8
    O: 12 
    O_final: 8 
  operand_source:
    I: 3
    W: 3
