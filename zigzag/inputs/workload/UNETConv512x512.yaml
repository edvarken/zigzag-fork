# compute all 1x1 kenrel convolutoins as GeMM

# conv0_encoder3_3x3: 3x3 convolution with 320 input channels and 320 output channels
- id: 0 # padding=1 around all four sides. 
  name: conv1_encoder0_3x3
  operator_type: Conv
  equation: O[k][oy][ox]+=W[k][c][fy][fx]*I[c][iy][ix] # (IY, IX) = (64, 64)
  dimension_relations: [ix=1*ox+1*fx, iy=1*oy+1*fy] # STRIDE 1
  loop_dims: [K, C, OY, OX, FY, FX]
  loop_sizes: [320, 320, 64, 64, 3, 3] # (OY, OX) = (64, 64)
  operand_precision:
    W: 4
    I: 8
    O: 12 
    O_final: 8 
  operand_source:
    I: 0
    W: 0

# conv0_encoder3_3x3: 3x3 convolution with 1280 input channels and 1280 output channels, STRIDE 2
- id: 1 # padding=1 around all four sides. 
  name: conv0_encoder3_3x3
  operator_type: Conv
  equation: O[k][oy][ox]+=W[k][c][fy][fx]*I[c][iy][ix] # (IY, IX) = (16, 16)
  dimension_relations: [ix=2*ox+1*fx, iy=2*oy+1*fy] # STRIDE 2
  loop_dims: [K, C, OY, OX, FY, FX]
  loop_sizes: [1280, 1280, 8, 8, 3, 3] # (OY, OX) = (8, 8)
  operand_precision:
    W: 4
    I: 8
    O: 12 
    O_final: 8 
  operand_source:
    I: 1
    W: 1

# conv0_mid_3x3: 3x3 convolution with 1280 input channels and 1280 output channels
- id: 2 # padding=1 around all four sides, with a kernel of 3x3 this means (IY, IX) = (OY, OX)
  name: conv0_mid_3x3
  operator_type: Conv
  equation: O[k][oy][ox]+=W[k][c][fy][fx]*I[c][iy][ix]
  dimension_relations: [ix=1*ox+1*fx, iy=1*oy+1*fy]
  loop_dims: [K, C, OY, OX, FY, FX]
  loop_sizes: [1280, 1280, 8, 8, 3, 3] # (OY, OX) = (8, 8) same as input dimensions
  operand_precision:
    W: 4
    I: 8
    O: 12 
    O_final: 8 
  operand_source:
    I: 2
    W: 2