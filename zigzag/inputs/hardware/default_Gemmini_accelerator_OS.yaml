name: default_Gemmini_accelerator
# for defaultConfig Gemmini:
# each PE in the systolic array has a 1Byte register to store the 12bit partial sum
# the scratchpad(4 banks of 4096 rows each) for Activations and Weights is single-ported, 256KB total, so 64KB per bank. 16*8=128bit wide per bank
# the Accumulator for outputting Outputs is double-ported, 64KB, one bank only! 16*32=512bit wide bank

memories:
  rf_2B: # registers inside systolic array
    size: 16 # staticMM: 4bit * 8bit = 12bit, dynamicMM: 8bit * 8bit = 16bit
    r_bw: 16
    w_bw: 16
    r_cost: 0.01
    w_cost: 0.01
    area: 0
    r_port: 1
    w_port: 1
    rw_port: 0
    latency: 1
    auto_cost_extraction: False
    operands: [O] # O = outputs, so Output-Stationary systolic array
    ports:
      - fh: w_port_1
        tl: r_port_1
        fl: w_port_1
        th: r_port_1
    served_dimensions: [] # so 16x16=256 instances of this register


  sram_sp_256KB: # 4 banks of 4096 rows each, 16*8(inputType)=128bit row-width for each row in a bank, 4 banks so 512bit total bandwidth?
    size: 2097152 # 2^19=524288bit=64KB, 4 * 2^19 = 2^21=2097152bit=256KB
    r_bw: 512 # bits read per cycle, for each port, or do we need to declare total bandwidth(=512bit) here?
    w_bw: 512
    r_cost: 22.9
    w_cost: 52.01
    area: 0
    r_port: 1 # 4 banks, each having a separate read and write port: but just model as one 512 bit read
    w_port: 1
    rw_port: 0 
    latency: 1
    min_r_granularity: 128 # i.e. reading from 1 bank?
    min_w_granularity: 128
    operands: [I1, I2] # inputs and weights
    ports:
      - fh: w_port_1 # I1=inputs
        tl: r_port_1
      - fh: w_port_1 # I2=weights
        tl: r_port_1
    served_dimensions: [D1, D2] # 1 instance

  sram_acc_64KB: # 1 bank of 4096 rows, 16*32(accType)=512bit wide
    size: 524288 # 2^19=524288bit=64KB
    r_bw: 512
    w_bw: 512
    r_cost: 22.9
    w_cost: 52.01
    area: 0
    r_port: 1 # 1 bank that's double-ported
    w_port: 1
    rw_port: 0
    latency: 1
    min_r_granularity: 512
    min_w_granularity: 512
    operands: [O] # Outputs only
    ports:
      - fh: w_port_1 # O=partials sums/outputs (we need to be able to place an initial bias value already inside the accumulator)
        tl: r_port_1
        fl: w_port_1 # this is writing the partial sums FROM the systolic array's regs TO this accumulator
        th: r_port_1
    served_dimensions: [D1, D2] # 1 instance

  dram: # main memory: DMA controller moves data between DRAM and SRAMs
    size: 10000000000 # 1.25GB
    r_bw: 128 #  dma_buswidth=128bit
    w_bw: 128
    r_cost: 700 # ?
    w_cost: 750 # ?
    area: 0
    r_port: 0
    w_port: 0
    rw_port: 1
    latency: 10
    operands: [I1, I2, O]
    ports:
      - fh: rw_port_1
        tl: rw_port_1
      - fh: rw_port_1
        tl: rw_port_1
      - fh: rw_port_1
        tl: rw_port_1
        fl: rw_port_1
        th: rw_port_1
    served_dimensions: [D1, D2] # 1 instance

operational_array:
  unit_energy: 0.04 # pJ
  unit_area: 1 # unit
  dimensions: [D1, D2]
  sizes: [16, 16]
